//expected-output.txt

1.  test explicit intialization
Neil says Uuuuungh! I weigh 10000 pounds, and I'm 1000 years old!   //Animal rhino


2.  test copy constructor
Neil says Uuuuungh! I weigh 10000 pounds, and I'm 1000 years old!   //Animal rhino

Deano says Uuuuungh! I weigh 10000 pounds, and I'm 1000 years old!  //Animal dino(rhino)


3.  test assignment operator
Pokey says Uuuuungh! I weigh 10000 pounds, and I'm 10 years old!    //Animal poco = Animal dino, setName(), setAge()


4.  test copy constructor
Spano says Woof woof! I weigh 35 pounds, and I'm 5 years old!   //Dog cockersp
Spano speaks: I'm a dog, my AKC # is 321 and my owner is Tom

Spano speaks: I'm a dog, my AKC # is 321 and my owner is Tom    //cokersp.speak()

Collo says Arf arf! I weigh 35 pounds, and I'm 5 years old!     //Dog collie
Collo speaks: I'm a dog, my AKC # is 321 and my owner is Tom


5.  test assignment operator
Perry says Purrrr! I weigh 8 pounds, and I'm 3 years old!       //Cat persian
Perry speaks: I'm a lucky cat and I own John

Pinky says Meoooowww! I weigh 8 pounds, and I'm 3 years old!    //Cat manx = persian, set...
Pinky speaks: I'm a lucky cat and I own Maxine

Pinky speaks: I'm a lucky cat and I own Maxine                  //manx.speak()


6.  test dynamic binding a1,a2 = derived object &collie, &manx; a1->speak(); a2->speak();
Collo speaks: Arf arf!

Pinky speaks: Meoooowww!


7.  test base = derived assignment Animal poco = Cat manx; cout << poco
Pinky says Meoooowww! I weigh 8 pounds, and I'm 3 years old! 


8.  test derived = base assignment Dog d1 = Animal rhino; cout d1; Cat c1 = Animal rhino; coutc1;
Neil says Uuuuungh! I weigh 10000 pounds, and I'm 1000 years old!
Neil speaks: I'm a dog, my AKC # is 0 and my owner is 
//Will it have null values for Dog speak()?


Neil says Uuuuungh! I weigh 10000 pounds, and I'm 1000 years old!
Neil speaks: I'm a 0 cat and I own 
//Will it have null values for Cat speak()?

